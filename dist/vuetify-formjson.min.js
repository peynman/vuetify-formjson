var VuetifyFormJSON = (function (exports, JSONEditor, VuetifyImageInput, axios) {
    'use strict';

    JSONEditor = JSONEditor && Object.prototype.hasOwnProperty.call(JSONEditor, 'default') ? JSONEditor['default'] : JSONEditor;
    VuetifyImageInput = VuetifyImageInput && Object.prototype.hasOwnProperty.call(VuetifyImageInput, 'default') ? VuetifyImageInput['default'] : VuetifyImageInput;
    axios = axios && Object.prototype.hasOwnProperty.call(axios, 'default') ? axios['default'] : axios;

    //
    //
    //
    //
    var script = {
      name: 'vuetify-formjson',
      props: {
        id: String,
        fields: Object,
        value: Object,
        options: Object
      },
      computed: {
        formId: function () {
          return this.id ? this.id : 'vuetify-formjson-#' + Math.random() * 10000;
        }
      },
      watch: {
        value: {
          deep: true,
          handler: function () {
            this.$emit('input', this.value);
          }
        }
      }
    };

    function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
        if (typeof shadowMode !== 'boolean') {
            createInjectorSSR = createInjector;
            createInjector = shadowMode;
            shadowMode = false;
        }
        // Vue.extend constructor export interop.
        const options = typeof script === 'function' ? script.options : script;
        // render functions
        if (template && template.render) {
            options.render = template.render;
            options.staticRenderFns = template.staticRenderFns;
            options._compiled = true;
            // functional template
            if (isFunctionalTemplate) {
                options.functional = true;
            }
        }
        // scopedId
        if (scopeId) {
            options._scopeId = scopeId;
        }
        let hook;
        if (moduleIdentifier) {
            // server build
            hook = function (context) {
                // 2.3 injection
                context =
                    context || // cached call
                        (this.$vnode && this.$vnode.ssrContext) || // stateful
                        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
                // 2.2 with runInNewContext: true
                if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                    context = __VUE_SSR_CONTEXT__;
                }
                // inject component styles
                if (style) {
                    style.call(this, createInjectorSSR(context));
                }
                // register component module identifier for async chunk inference
                if (context && context._registeredComponents) {
                    context._registeredComponents.add(moduleIdentifier);
                }
            };
            // used by ssr in case component is cached and beforeCreate
            // never gets called
            options._ssrRegister = hook;
        }
        else if (style) {
            hook = shadowMode
                ? function (context) {
                    style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
                }
                : function (context) {
                    style.call(this, createInjector(context));
                };
        }
        if (hook) {
            if (options.functional) {
                // register for functional component in vue file
                const originalRender = options.render;
                options.render = function renderWithStyleInjection(h, context) {
                    hook.call(context);
                    return originalRender(h, context);
                };
            }
            else {
                // inject component registration as beforeCreate hook
                const existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
            }
        }
        return script;
    }

    /* script */
    const __vue_script__ = script;

    /* template */
    var __vue_render__ = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("vf-fields-renderer", {
        attrs: { options: _vm.options, id: _vm.formId, fields: _vm.fields },
        model: {
          value: _vm.value,
          callback: function($$v) {
            _vm.value = $$v;
          },
          expression: "value"
        }
      })
    };
    var __vue_staticRenderFns__ = [];
    __vue_render__._withStripped = true;

      /* style */
      const __vue_inject_styles__ = undefined;
      /* scoped */
      const __vue_scope_id__ = undefined;
      /* module identifier */
      const __vue_module_identifier__ = undefined;
      /* functional template */
      const __vue_is_functional_template__ = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__ = normalizeComponent(
        { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
        __vue_inject_styles__,
        __vue_script__,
        __vue_scope_id__,
        __vue_is_functional_template__,
        __vue_module_identifier__,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$1 = {
      name: 'vf-text-input',
      props: {
        id: String,
        field: Object,
        value: Object,
        updateKeyCodes: {
          type: Array,
          default: () => []
        }
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      methods: {
        updateInput: function (ev) {
          if (!this.updateKeyCodes || this.updateKeyCodes.length === 0 || this.updateKeyCodes.includes(ev.keyCode)) {
            // update input on tab/enter pressed
            this.$emit('input', this.value);
          }
        }
      }
    };

    /* script */
    const __vue_script__$1 = script$1;

    /* template */
    var __vue_render__$1 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-text-field",
        _vm._b(
          {
            class: "vf-input " + _vm.field.class,
            attrs: { label: _vm.field.label, "hide-details": "auto" },
            nativeOn: {
              keyup: function($event) {
                return _vm.updateInput($event)
              }
            },
            model: {
              value: _vm.value,
              callback: function($$v) {
                _vm.value = $$v;
              },
              expression: "value"
            }
          },
          "v-text-field",
          _vm.fieldProps,
          false
        )
      )
    };
    var __vue_staticRenderFns__$1 = [];
    __vue_render__$1._withStripped = true;

      /* style */
      const __vue_inject_styles__$1 = undefined;
      /* scoped */
      const __vue_scope_id__$1 = undefined;
      /* module identifier */
      const __vue_module_identifier__$1 = undefined;
      /* functional template */
      const __vue_is_functional_template__$1 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$1 = normalizeComponent(
        { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
        __vue_inject_styles__$1,
        __vue_script__$1,
        __vue_scope_id__$1,
        __vue_is_functional_template__$1,
        __vue_module_identifier__$1,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$2 = {
      name: 'vf-color-input',
      props: {
        id: String,
        field: Object,
        value: String
      },
      computed: {
        getColorValue: function () {
          return this.value;
        },
        fieldProps: function () {
          return { ...this.field.props
          };
        },
        pickerProps: function () {
          return { ...this.field.picker
          };
        }
      },
      data: () => ({
        ignore: false
      }),
      methods: {
        colorTextChanged: function (ev) {
          this.$emit('input', this.value);
          this.ignore = true;
        },
        colorSelected: function (c) {
          if (this.ignore) {
            this.ignore = false;
          } else {
            this.value = c.hexa;
          }

          this.$emit('input', this.value);
        }
      }
    };

    /* script */
    const __vue_script__$2 = script$2;

    /* template */
    var __vue_render__$2 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-text-field",
        _vm._b(
          {
            class: "vf-input " + _vm.field.class,
            attrs: { label: _vm.field.label, "hide-details": "auto", mask: "####" },
            nativeOn: {
              keyup: function($event) {
                return _vm.colorTextChanged($event)
              }
            },
            scopedSlots: _vm._u([
              {
                key: "prepend-inner",
                fn: function() {
                  return [
                    _c(
                      "v-menu",
                      {
                        attrs: {
                          top: "",
                          "nudge-bottom": "105",
                          "nudge-left": "16",
                          "close-on-content-click": false
                        },
                        scopedSlots: _vm._u([
                          {
                            key: "activator",
                            fn: function(ref) {
                              var on = ref.on;
                              return [
                                _c(
                                  "div",
                                  _vm._g(
                                    {
                                      style: {
                                        border: "1px solid black",
                                        backgroundColor: _vm.value,
                                        cursor: "pointer",
                                        height: "16px",
                                        width: "16px",
                                        marginTop: "2px",
                                        borderRadius: "5px",
                                        transition:
                                          "border-radius 200ms ease-in-out"
                                      }
                                    },
                                    on
                                  )
                                )
                              ]
                            }
                          }
                        ]),
                        model: {
                          value: _vm.colorsMenu,
                          callback: function($$v) {
                            _vm.colorsMenu = $$v;
                          },
                          expression: "colorsMenu"
                        }
                      },
                      [
                        _c(
                          "v-card",
                          [
                            _c(
                              "v-card-text",
                              { staticClass: "pa-0" },
                              [
                                _c(
                                  "v-color-picker",
                                  _vm._b(
                                    {
                                      attrs: { value: _vm.getColorValue },
                                      on: { "update:color": _vm.colorSelected }
                                    },
                                    "v-color-picker",
                                    _vm.pickerProps,
                                    false
                                  )
                                )
                              ],
                              1
                            )
                          ],
                          1
                        )
                      ],
                      1
                    )
                  ]
                },
                proxy: true
              }
            ]),
            model: {
              value: _vm.value,
              callback: function($$v) {
                _vm.value = $$v;
              },
              expression: "value"
            }
          },
          "v-text-field",
          _vm.fieldProps,
          false
        )
      )
    };
    var __vue_staticRenderFns__$2 = [];
    __vue_render__$2._withStripped = true;

      /* style */
      const __vue_inject_styles__$2 = undefined;
      /* scoped */
      const __vue_scope_id__$2 = undefined;
      /* module identifier */
      const __vue_module_identifier__$2 = undefined;
      /* functional template */
      const __vue_is_functional_template__$2 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$2 = normalizeComponent(
        { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
        __vue_inject_styles__$2,
        __vue_script__$2,
        __vue_scope_id__$2,
        __vue_is_functional_template__$2,
        __vue_module_identifier__$2,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$3 = {
      name: 'vf-select-button-input',
      props: {
        field: Object,
        id: String,
        value: [Array, Number]
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      methods: {
        getBtnFieldProps: function (btn) {
          return { ...this.field.props,
            ...btn.props
          };
        }
      },
      watch: {
        value: function () {
          this.$emit('input', this.value);
        }
      }
    };

    /* script */
    const __vue_script__$3 = script$3;

    /* template */
    var __vue_render__$3 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        {
          class:
            "vf-input d-flex flex-grow-1 flex-row flex-wrap align-center justify-space-between " +
            _vm.field.class
        },
        [
          _c("label", { staticClass: "flex-grow-0" }, [
            _vm._v(_vm._s(_vm.field.label))
          ]),
          _c(
            "v-btn-toggle",
            _vm._b(
              {
                staticClass: "d-flex flex-grow-1 flex-row justify-end",
                model: {
                  value: _vm.value,
                  callback: function($$v) {
                    _vm.value = $$v;
                  },
                  expression: "value"
                }
              },
              "v-btn-toggle",
              _vm.fieldProps,
              false
            ),
            _vm._l(_vm.field.objects, function(btn, index) {
              return _c(
                "div",
                { key: _vm.id + "-btn-grp-" + index },
                [
                  btn.title
                    ? _c(
                        "v-tooltip",
                        {
                          scopedSlots: _vm._u(
                            [
                              {
                                key: "activator",
                                fn: function(ref) {
                                  var on = ref.on;
                                  return [
                                    _c(
                                      "v-btn",
                                      _vm._g(
                                        _vm._b(
                                          {},
                                          "v-btn",
                                          _vm.getBtnFieldProps(btn),
                                          false
                                        ),
                                        on
                                      ),
                                      [
                                        btn.label
                                          ? _c("span", { staticClass: "text-sm" }, [
                                              _vm._v(_vm._s(btn.label))
                                            ])
                                          : _vm._e(),
                                        btn.icon
                                          ? _c(
                                              "v-icon",
                                              _vm._b(
                                                {},
                                                "v-icon",
                                                btn.iconProps,
                                                false
                                              ),
                                              [_vm._v(_vm._s(btn.icon))]
                                            )
                                          : _vm._e()
                                      ],
                                      1
                                    )
                                  ]
                                }
                              }
                            ],
                            null,
                            true
                          )
                        },
                        [_vm._v("\n        " + _vm._s(btn.title) + "\n      ")]
                      )
                    : _c(
                        "v-btn",
                        _vm._b({}, "v-btn", _vm.getBtnFieldProps(btn), false),
                        [
                          btn.label
                            ? _c("span", { staticClass: "text-sm" }, [
                                _vm._v(_vm._s(btn.label))
                              ])
                            : _vm._e(),
                          btn.icon
                            ? _c(
                                "v-icon",
                                _vm._b({}, "v-icon", btn.iconProps, false),
                                [_vm._v(_vm._s(btn.icon))]
                              )
                            : _vm._e()
                        ],
                        1
                      )
                ],
                1
              )
            }),
            0
          )
        ],
        1
      )
    };
    var __vue_staticRenderFns__$3 = [];
    __vue_render__$3._withStripped = true;

      /* style */
      const __vue_inject_styles__$3 = undefined;
      /* scoped */
      const __vue_scope_id__$3 = undefined;
      /* module identifier */
      const __vue_module_identifier__$3 = undefined;
      /* functional template */
      const __vue_is_functional_template__$3 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$3 = normalizeComponent(
        { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
        __vue_inject_styles__$3,
        __vue_script__$3,
        __vue_scope_id__$3,
        __vue_is_functional_template__$3,
        __vue_module_identifier__$3,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$4 = {
      name: 'vf-select-input',
      props: {
        field: Object,
        id: String,
        value: [Array, String]
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      watch: {
        value: function () {
          this.$emit('input', this.value);
        }
      }
    };

    /* script */
    const __vue_script__$4 = script$4;

    /* template */
    var __vue_render__$4 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-select",
        _vm._b(
          {
            class: "vf-input " + _vm.field.class,
            attrs: {
              items: _vm.field.objects,
              label: _vm.field.label,
              multiple: _vm.field.multiple,
              "menu-props": { maxHeight: "400" },
              "hide-details": "auto",
              "item-text": "title",
              "item-value": "id"
            },
            model: {
              value: _vm.value,
              callback: function($$v) {
                _vm.value = $$v;
              },
              expression: "value"
            }
          },
          "v-select",
          _vm.fieldProps,
          false
        )
      )
    };
    var __vue_staticRenderFns__$4 = [];
    __vue_render__$4._withStripped = true;

      /* style */
      const __vue_inject_styles__$4 = undefined;
      /* scoped */
      const __vue_scope_id__$4 = undefined;
      /* module identifier */
      const __vue_module_identifier__$4 = undefined;
      /* functional template */
      const __vue_is_functional_template__$4 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$4 = normalizeComponent(
        { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
        __vue_inject_styles__$4,
        __vue_script__$4,
        __vue_scope_id__$4,
        __vue_is_functional_template__$4,
        __vue_module_identifier__$4,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$5 = {
      name: 'vf-range-input',
      props: {
        id: String,
        field: Object,
        value: Number
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      methods: {
        updateInput: function () {
          this.$emit('input', this.value);
        }
      }
    };

    /* script */
    const __vue_script__$5 = script$5;

    /* template */
    var __vue_render__$5 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-slider",
        _vm._b(
          {
            class: "vf-input " + _vm.field.class,
            attrs: {
              label: _vm.field.label,
              "thumb-label": "",
              "hide-details": "auto"
            },
            on: { change: _vm.updateInput },
            model: {
              value: _vm.value,
              callback: function($$v) {
                _vm.value = $$v;
              },
              expression: "value"
            }
          },
          "v-slider",
          _vm.fieldProps,
          false
        )
      )
    };
    var __vue_staticRenderFns__$5 = [];
    __vue_render__$5._withStripped = true;

      /* style */
      const __vue_inject_styles__$5 = undefined;
      /* scoped */
      const __vue_scope_id__$5 = undefined;
      /* module identifier */
      const __vue_module_identifier__$5 = undefined;
      /* functional template */
      const __vue_is_functional_template__$5 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$5 = normalizeComponent(
        { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
        __vue_inject_styles__$5,
        __vue_script__$5,
        __vue_scope_id__$5,
        __vue_is_functional_template__$5,
        __vue_module_identifier__$5,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$6 = {
      name: 'vf-switch-input',
      props: {
        id: String,
        field: Object,
        value: Object
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      methods: {
        updateInput: function () {
          this.$emit('input', this.value);
        }
      }
    };

    /* script */
    const __vue_script__$6 = script$6;

    /* template */
    var __vue_render__$6 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-switch",
        _vm._b(
          {
            class: "vf-input " + _vm.field.class,
            attrs: { label: _vm.field.label, "hide-details": "auto" },
            on: { change: _vm.updateInput },
            model: {
              value: _vm.value,
              callback: function($$v) {
                _vm.value = $$v;
              },
              expression: "value"
            }
          },
          "v-switch",
          _vm.fieldProps,
          false
        )
      )
    };
    var __vue_staticRenderFns__$6 = [];
    __vue_render__$6._withStripped = true;

      /* style */
      const __vue_inject_styles__$6 = undefined;
      /* scoped */
      const __vue_scope_id__$6 = undefined;
      /* module identifier */
      const __vue_module_identifier__$6 = undefined;
      /* functional template */
      const __vue_is_functional_template__$6 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$6 = normalizeComponent(
        { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },
        __vue_inject_styles__$6,
        __vue_script__$6,
        __vue_scope_id__$6,
        __vue_is_functional_template__$6,
        __vue_module_identifier__$6,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$7 = {
      name: 'vf-autocomplete-input',
      props: {
        id: String,
        field: Object,
        value: [Array, String]
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      watch: {
        value: {
          deep: true,

          handler() {
            this.$emit('input', this.value);
          }

        }
      }
    };

    /* script */
    const __vue_script__$7 = script$7;

    /* template */
    var __vue_render__$7 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-autocomplete",
        _vm._b(
          {
            class: "vf-input " + _vm.field.class,
            attrs: {
              label: _vm.field.label,
              items: _vm.field.objects,
              "item-text": "title",
              "item-value": "id",
              "hide-details": "auto"
            },
            model: {
              value: _vm.value,
              callback: function($$v) {
                _vm.value = $$v;
              },
              expression: "value"
            }
          },
          "v-autocomplete",
          _vm.fieldProps,
          false
        )
      )
    };
    var __vue_staticRenderFns__$7 = [];
    __vue_render__$7._withStripped = true;

      /* style */
      const __vue_inject_styles__$7 = undefined;
      /* scoped */
      const __vue_scope_id__$7 = undefined;
      /* module identifier */
      const __vue_module_identifier__$7 = undefined;
      /* functional template */
      const __vue_is_functional_template__$7 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$7 = normalizeComponent(
        { render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 },
        __vue_inject_styles__$7,
        __vue_script__$7,
        __vue_scope_id__$7,
        __vue_is_functional_template__$7,
        __vue_module_identifier__$7,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$8 = {
      name: 'vf-multitext-input',
      props: {
        id: String,
        field: Object,
        value: {
          type: Object,
          default: () => ({})
        }
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props,
            ...(this.current && this.current.props ? this.current.props : {})
          };
        },
        modes: function () {
          return this.field.modes;
        },
        current: function () {
          return this.modes[this.currIndex];
        },
        appendMode: function () {
          return this.field.slot ? this.field.slot : 'prepend';
        }
      },
      data: () => ({
        currIndex: 0
      }),
      methods: {
        updateInput: function () {
          this.$emit('input', this.value);
        },

        nextMode() {
          this.currIndex = this.currIndex === this.modes.length - 1 ? 0 : this.currIndex + 1;
        }

      },

      created() {
        if (typeof this.value === 'object' && this.value.id) {
          let indexer = 0;
          const self = this;
          this.modes.forEach(m => {
            if (m.id === self.value.id) {
              self.currIndex = indexer;
            }

            indexer++;
          });
        }

        this.current = this.modes[this.currIndex];
      }

    };

    /* script */
    const __vue_script__$8 = script$8;

    /* template */
    var __vue_render__$8 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-text-field",
        _vm._b(
          {
            ref: "inputValue",
            class: "vf-input " + _vm.field.class,
            attrs: { label: _vm.field.label, "hide-details": "auto" },
            on: {
              input: function($event) {
                return _vm.updateInput()
              }
            },
            scopedSlots: _vm._u(
              [
                {
                  key: _vm.appendMode,
                  fn: function() {
                    return [
                      _c(
                        "v-tooltip",
                        {
                          attrs: { top: "" },
                          scopedSlots: _vm._u([
                            {
                              key: "activator",
                              fn: function(ref) {
                                var on = ref.on;
                                return [
                                  _c(
                                    "v-btn",
                                    _vm._g(
                                      {
                                        staticClass: "w70 flex-row",
                                        attrs: {
                                          small: "",
                                          dense: "",
                                          rounded: "",
                                          outlined: "",
                                          color: "secondary"
                                        },
                                        on: {
                                          click: function($event) {
                                            return _vm.nextMode()
                                          }
                                        }
                                      },
                                      on
                                    ),
                                    [
                                      _vm._v(
                                        "\n          " +
                                          _vm._s(
                                            _vm.current.abbr
                                              ? _vm.current.abbr
                                              : _vm.current.title
                                          ) +
                                          "\n          "
                                      ),
                                      _c("v-icon", { attrs: { small: "" } }, [
                                        _vm._v(
                                          _vm._s(
                                            _vm.field.icon
                                              ? _vm.field.icon
                                              : "chevron_right"
                                          )
                                        )
                                      ])
                                    ],
                                    1
                                  )
                                ]
                              }
                            }
                          ])
                        },
                        [_c("span", [_vm._v(_vm._s(_vm.current.title))])]
                      )
                    ]
                  },
                  proxy: true
                }
              ],
              null,
              true
            ),
            model: {
              value: _vm.value[_vm.current.id],
              callback: function($$v) {
                _vm.$set(_vm.value, _vm.current.id, $$v);
              },
              expression: "value[current.id]"
            }
          },
          "v-text-field",
          _vm.fieldProps,
          false
        )
      )
    };
    var __vue_staticRenderFns__$8 = [];
    __vue_render__$8._withStripped = true;

      /* style */
      const __vue_inject_styles__$8 = undefined;
      /* scoped */
      const __vue_scope_id__$8 = undefined;
      /* module identifier */
      const __vue_module_identifier__$8 = undefined;
      /* functional template */
      const __vue_is_functional_template__$8 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$8 = normalizeComponent(
        { render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 },
        __vue_inject_styles__$8,
        __vue_script__$8,
        __vue_scope_id__$8,
        __vue_is_functional_template__$8,
        __vue_module_identifier__$8,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$9 = {
      name: 'vf-fields-renderer',
      props: {
        id: String,
        fields: Object,
        value: {
          type: Object,
          default: () => ({})
        },
        options: Object
      },
      watch: {
        value: {
          deep: true,
          handler: function () {
            this.$emit('input', this.value);
          }
        }
      },
      methods: {
        getRootComponent() {
          return this.options && this.options.type === 'col' ? 'v-col' : 'v-row';
        },

        getRootComponentProps() {
          if (this.options) {
            if (this.options.props) {
              return this.options.props;
            }
          }

          return {};
        },

        getComponentPropsForField(field, key) {
          if (!field.type || field.type === 'row' || field.type === 'col') {
            return {
              fields: field.fields,
              options: {
                type: field.type ? field.type : 'row',
                props: field.props,
                ...field.options
              }
            };
          }

          const props = {
            field: { ...field
            },
            id: `${this.id}-field-${key}`
          };

          if (this.options) {
            if (this.options.class) {
              props.field.class = this.options.class + (props.field.class ? ' ' + props.field.class : '');
            }

            if (this.options.props) {
              props.field.props = { ...this.options.props,
                ...(props.field.props ? props.field.props : {})
              };
            }
          }

          return props;
        },

        getComponentForField(field) {
          if (field.type === 'input' && field.input) {
            return `vf-${field.input}-input`;
          } else if (field.type === 'group' && field.group) {
            return `vf-group-${field.group}`;
          } else if (field.fields) {
            return 'vf-fields-renderer';
          }
        }

      }
    };

    /* script */
    const __vue_script__$9 = script$9;

    /* template */
    var __vue_render__$9 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        _vm.getRootComponent(),
        _vm._b(
          { tag: "component", staticClass: "ma-0 pa-0" },
          "component",
          _vm.getRootComponentProps(),
          false
        ),
        _vm._l(_vm.fields, function(field, key) {
          return _c(
            _vm.getComponentForField(field),
            _vm._b(
              {
                key: _vm.id + "-properties-" + key,
                ref: key,
                refInFor: true,
                tag: "component",
                model: {
                  value: _vm.value[key],
                  callback: function($$v) {
                    _vm.$set(_vm.value, key, $$v);
                  },
                  expression: "value[key]"
                }
              },
              "component",
              _vm.getComponentPropsForField(field),
              false
            )
          )
        }),
        1
      )
    };
    var __vue_staticRenderFns__$9 = [];
    __vue_render__$9._withStripped = true;

      /* style */
      const __vue_inject_styles__$9 = undefined;
      /* scoped */
      const __vue_scope_id__$9 = undefined;
      /* module identifier */
      const __vue_module_identifier__$9 = undefined;
      /* functional template */
      const __vue_is_functional_template__$9 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$9 = normalizeComponent(
        { render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 },
        __vue_inject_styles__$9,
        __vue_script__$9,
        __vue_scope_id__$9,
        __vue_is_functional_template__$9,
        __vue_module_identifier__$9,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    var script$a = {
      name: 'vf-json-input',
      props: {
        id: String,
        field: Object,
        value: [Object, String]
      },
      data: () => ({
        options: {
          mode: 'code'
        },
        editor: null,
        ignoreUpdate: false
      }),
      mounted: function () {
        const component = this;
        const container = this.$refs.editor;
        const options = { ...this.options,
          onChange: function () {
            try {
              this.value = component.editor.get();
              this.ignoreUpdate = true;
              component.$emit('input', this.value);
            } catch (ex) {// console.error(ex);
            }
          }
        };

        if (container) {
          this.editor = new JSONEditor(container, options);

          if (this.value) {
            if (typeof this.value === 'string') {
              this.editor.set(JSON.parse(this.value));
            } else {
              this.editor.set(this.value);
            }
          } else {
            this.editor.set({});
          }
        }
      },
      watch: {
        value: {
          deep: true,

          handler() {
            const pos = this.editor.getTextSelection();
            this.editor.set(this.value);
            this.editor.setTextSelection(pos.start, pos.end);
          }

        }
      },
      methods: {
        setMode: function (mode) {
          this.options.mode = mode;
          this.editor.setMode(mode);
        }
      }
    };

    /* script */
    const __vue_script__$a = script$a;

    /* template */
    var __vue_render__$a = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        { class: "vf-input d-flex flex-grow-1 flex-column " + _vm.field.class },
        [
          _c(
            "div",
            { staticClass: "d-flex flex-row align-center mb-1" },
            [
              _c(
                "label",
                {
                  class:
                    _vm.field.props && _vm.field.props.error
                      ? "red--text me-1"
                      : "me-1"
                },
                [_vm._v(_vm._s(_vm.field.label))]
              ),
              _c(
                "v-btn",
                {
                  attrs: {
                    text: "",
                    icon: "",
                    color: _vm.options.mode === "code" ? "primary" : "secondary"
                  },
                  on: {
                    click: function($event) {
                      return _vm.setMode("code")
                    }
                  }
                },
                [
                  _c("v-icon", [
                    _vm._v(
                      _vm._s(
                        _vm.field.icons && _vm.field.icons.code
                          ? _vm.field.icons.code
                          : "code"
                      )
                    )
                  ])
                ],
                1
              ),
              _c(
                "v-btn",
                {
                  attrs: {
                    text: "",
                    icon: "",
                    color: _vm.options.mode === "tree" ? "primary" : "secondary"
                  },
                  on: {
                    click: function($event) {
                      return _vm.setMode("tree")
                    }
                  }
                },
                [
                  _c("v-icon", [
                    _vm._v(
                      _vm._s(
                        _vm.field.icons && _vm.field.icons.edit
                          ? _vm.field.icons.edit
                          : "edit"
                      )
                    )
                  ])
                ],
                1
              ),
              _c(
                "v-btn",
                {
                  attrs: {
                    text: "",
                    icon: "",
                    color: _vm.options.mode === "form" ? "primary" : "secondary"
                  },
                  on: {
                    click: function($event) {
                      return _vm.setMode("form")
                    }
                  }
                },
                [
                  _c("v-icon", [
                    _vm._v(
                      _vm._s(
                        _vm.field.icons && _vm.field.icons.view
                          ? _vm.field.icons.view
                          : "remove_red_eye"
                      )
                    )
                  ])
                ],
                1
              )
            ],
            1
          ),
          _c("div", {
            ref: "editor",
            style:
              "width: 100%; height: " +
              (_vm.field.height ? _vm.field.height : "400px") +
              ";"
          }),
          _c("v-divider"),
          _vm.field.props && _vm.field.props.error
            ? _c(
                "div",
                { staticClass: "d-flex flex-column" },
                _vm._l(_vm.field.props["error-messages"], function(err, i) {
                  return _c(
                    "div",
                    { key: "error-message-" + i, staticClass: "red--text" },
                    [_vm._v(_vm._s(err))]
                  )
                }),
                0
              )
            : _vm._e()
        ],
        1
      )
    };
    var __vue_staticRenderFns__$a = [];
    __vue_render__$a._withStripped = true;

      /* style */
      const __vue_inject_styles__$a = undefined;
      /* scoped */
      const __vue_scope_id__$a = undefined;
      /* module identifier */
      const __vue_module_identifier__$a = undefined;
      /* functional template */
      const __vue_is_functional_template__$a = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$a = normalizeComponent(
        { render: __vue_render__$a, staticRenderFns: __vue_staticRenderFns__$a },
        __vue_inject_styles__$a,
        __vue_script__$a,
        __vue_scope_id__$a,
        __vue_is_functional_template__$a,
        __vue_module_identifier__$a,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$b = {
      name: 'vf-checkbox-input',
      props: {
        id: String,
        field: Object,
        value: [Boolean, String, Number]
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      methods: {
        updateInput: function (ev) {
          this.$emit('input', this.value);
        }
      }
    };

    /* script */
    const __vue_script__$b = script$b;

    /* template */
    var __vue_render__$b = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-checkbox",
        _vm._b(
          {
            class: "vf-input " + _vm.field.class,
            attrs: { label: _vm.field.label, "hide-details": "auto" },
            on: { change: _vm.updateInput },
            model: {
              value: _vm.value,
              callback: function($$v) {
                _vm.value = $$v;
              },
              expression: "value"
            }
          },
          "v-checkbox",
          _vm.fieldProps,
          false
        )
      )
    };
    var __vue_staticRenderFns__$b = [];
    __vue_render__$b._withStripped = true;

      /* style */
      const __vue_inject_styles__$b = undefined;
      /* scoped */
      const __vue_scope_id__$b = undefined;
      /* module identifier */
      const __vue_module_identifier__$b = undefined;
      /* functional template */
      const __vue_is_functional_template__$b = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$b = normalizeComponent(
        { render: __vue_render__$b, staticRenderFns: __vue_staticRenderFns__$b },
        __vue_inject_styles__$b,
        __vue_script__$b,
        __vue_scope_id__$b,
        __vue_is_functional_template__$b,
        __vue_module_identifier__$b,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$c = {
      name: 'vf-objects-list-input',
      props: {
        id: String,
        field: Object,
        value: {
          type: Object,
          default: () => ({})
        }
      },
      computed: {
        decorator: function () {
          return {
            id: this.field.decorator ? this.field.decorator.id : 'id',
            title: this.field.decorator ? this.field.decorator.title : 'title',
            label: this.field.decorator ? this.field.decorator.label : ':id#:title'
          };
        }
      },
      methods: {
        getProps: function (item) {
          return { ...this.field.props,
            ...(item.props ? item.props : {})
          };
        },
        getLabel: function (item) {
          const decorator = this.decorator;
          return decorator.label.replace(':id', item[decorator.id]).replace(':title', item[decorator.title]);
        }
      },
      watch: {
        value: function () {
          this.$emit('input', this.value);
        }
      }
    };

    /* script */
    const __vue_script__$c = script$c;

    /* template */
    var __vue_render__$c = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        { class: "vf-input d-flex flex-column " + _vm.field.class },
        [
          _c(
            "label",
            { class: _vm.field.props && _vm.field.props.error ? "red--text" : "" },
            [_vm._v(_vm._s(_vm.field.label))]
          ),
          _c(
            "div",
            { staticClass: "row ma-0" },
            _vm._l(_vm.field.objects, function(item) {
              return _c(
                "v-checkbox",
                _vm._b(
                  {
                    key: _vm.id + "-checkbox-" + item[_vm.decorator.id],
                    class:
                      "ma-0 pa-0 me-4 " + (item.props ? item.props.class : null),
                    attrs: { label: _vm.getLabel(item) },
                    model: {
                      value: _vm.value[item[_vm.decorator.id]],
                      callback: function($$v) {
                        _vm.$set(_vm.value, item[_vm.decorator.id], $$v);
                      },
                      expression: "value[item[decorator.id]]"
                    }
                  },
                  "v-checkbox",
                  _vm.getProps(item),
                  false
                )
              )
            }),
            1
          ),
          _vm.field.props && _vm.field.props.error
            ? _c(
                "div",
                { staticClass: "d-flex flex-column" },
                _vm._l(_vm.field.props["error-messages"], function(err, index) {
                  return _c(
                    "div",
                    { key: _vm.id + "-error-" + index, staticClass: "red--text" },
                    [_vm._v(_vm._s(err))]
                  )
                }),
                0
              )
            : _vm._e()
        ]
      )
    };
    var __vue_staticRenderFns__$c = [];
    __vue_render__$c._withStripped = true;

      /* style */
      const __vue_inject_styles__$c = undefined;
      /* scoped */
      const __vue_scope_id__$c = undefined;
      /* module identifier */
      const __vue_module_identifier__$c = undefined;
      /* functional template */
      const __vue_is_functional_template__$c = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$c = normalizeComponent(
        { render: __vue_render__$c, staticRenderFns: __vue_staticRenderFns__$c },
        __vue_inject_styles__$c,
        __vue_script__$c,
        __vue_scope_id__$c,
        __vue_is_functional_template__$c,
        __vue_module_identifier__$c,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$d = {
      name: 'vf-radio-group-input',
      props: {
        id: String,
        field: Object,
        value: String
      },
      computed: {
        decorator: function () {
          return {
            id: this.field.decorator ? this.field.decorator.id : 'id',
            title: this.field.decorator ? this.field.decorator.title : 'title',
            label: this.field.decorator ? this.field.decorator.label : ':id#:title'
          };
        }
      },
      methods: {
        getProps: function (item) {
          return { ...this.field.props,
            ...(item.props ? item.props : {})
          };
        },
        getLabel: function (item) {
          const decorator = this.decorator;
          return decorator.label.replace(':id', item[decorator.id]).replace(':title', item[decorator.title]);
        }
      },
      watch: {
        value: function () {
          this.$emit('input', this.value);
        }
      }
    };

    /* script */
    const __vue_script__$d = script$d;

    /* template */
    var __vue_render__$d = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        { class: "vf-input d-flex flex-column " + _vm.field.class },
        [
          _c(
            "label",
            { class: _vm.field.props && _vm.field.props.error ? "red--text" : "" },
            [_vm._v(_vm._s(_vm.field.label))]
          ),
          _c(
            "div",
            { staticClass: "row ma-0" },
            [
              _c(
                "v-radio-group",
                {
                  attrs: { mandatory: false },
                  model: {
                    value: _vm.value,
                    callback: function($$v) {
                      _vm.value = $$v;
                    },
                    expression: "value"
                  }
                },
                _vm._l(_vm.field.objects, function(item) {
                  return _c(
                    "v-radio",
                    _vm._b(
                      {
                        key: _vm.id + "-checkbox-" + item[_vm.decorator.id],
                        class: "" + (item.class ? item.class : null),
                        attrs: {
                          value: item[_vm.decorator.id],
                          label: _vm.getLabel(item)
                        }
                      },
                      "v-radio",
                      _vm.getProps(item),
                      false
                    )
                  )
                }),
                1
              )
            ],
            1
          ),
          _vm.field.props && _vm.field.props.error
            ? _c(
                "div",
                { staticClass: "d-flex flex-column" },
                _vm._l(_vm.field.props["error-messages"], function(err, index) {
                  return _c(
                    "div",
                    { key: _vm.id + "-error-" + index, staticClass: "red--text" },
                    [_vm._v(_vm._s(err))]
                  )
                }),
                0
              )
            : _vm._e()
        ]
      )
    };
    var __vue_staticRenderFns__$d = [];
    __vue_render__$d._withStripped = true;

      /* style */
      const __vue_inject_styles__$d = undefined;
      /* scoped */
      const __vue_scope_id__$d = undefined;
      /* module identifier */
      const __vue_module_identifier__$d = undefined;
      /* functional template */
      const __vue_is_functional_template__$d = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$d = normalizeComponent(
        { render: __vue_render__$d, staticRenderFns: __vue_staticRenderFns__$d },
        __vue_inject_styles__$d,
        __vue_script__$d,
        __vue_scope_id__$d,
        __vue_is_functional_template__$d,
        __vue_module_identifier__$d,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    var script$e = {
      name: 'vf-bitwise-flags-input',
      props: {
        id: String,
        field: Object,
        value: Number
      },
      data: () => ({
        innerValue: {}
      }),
      watch: {
        value: function () {
          const newInner = {};
          this.field.objects.forEach(i => {
            if ((this.value & i.id) !== 0) {
              newInner[i.id] = true;
            }
          });
          this.innerValue = newInner;
        },
        innerValue: {
          deep: true,

          handler() {
            let flag = 0;

            for (const prop in this.innerValue) {
              if (Object.prototype.hasOwnProperty.call(this.innerValue, prop)) {
                if (this.innerValue[prop]) {
                  flag += parseInt(prop);
                }
              }
            }

            this.value = flag;
            this.$emit('input', this.value);
          }

        }
      }
    };

    /* script */
    const __vue_script__$e = script$e;

    /* template */
    var __vue_render__$e = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("vf-objects-list-input", {
        attrs: { field: _vm.field, id: _vm.id + "-bitwise" },
        model: {
          value: _vm.innerValue,
          callback: function($$v) {
            _vm.innerValue = $$v;
          },
          expression: "innerValue"
        }
      })
    };
    var __vue_staticRenderFns__$e = [];
    __vue_render__$e._withStripped = true;

      /* style */
      const __vue_inject_styles__$e = undefined;
      /* scoped */
      const __vue_scope_id__$e = undefined;
      /* module identifier */
      const __vue_module_identifier__$e = undefined;
      /* functional template */
      const __vue_is_functional_template__$e = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$e = normalizeComponent(
        { render: __vue_render__$e, staticRenderFns: __vue_staticRenderFns__$e },
        __vue_inject_styles__$e,
        __vue_script__$e,
        __vue_scope_id__$e,
        __vue_is_functional_template__$e,
        __vue_module_identifier__$e,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    var script$f = {
      components: {
        [VuetifyImageInput.name]: VuetifyImageInput
      },
      name: 'vf-image-upload-input',
      props: {
        id: String,
        field: Object,
        value: String
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      watch: {
        value: {
          deep: true,

          handler() {
            this.$emit('input', this.value);
          }

        }
      }
    };

    /* script */
    const __vue_script__$f = script$f;

    /* template */
    var __vue_render__$f = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        { class: "vf-input d-flex flex-column " + _vm.field.class },
        [
          _c("label", { staticClass: "ma-1" }, [_vm._v(_vm._s(_vm.field.label))]),
          _c(
            "v-image-input",
            _vm._b(
              {
                attrs: { "image-quality": 0.85 },
                model: {
                  value: _vm.value,
                  callback: function($$v) {
                    _vm.value = $$v;
                  },
                  expression: "value"
                }
              },
              "v-image-input",
              _vm.fieldProps,
              false
            )
          )
        ],
        1
      )
    };
    var __vue_staticRenderFns__$f = [];
    __vue_render__$f._withStripped = true;

      /* style */
      const __vue_inject_styles__$f = undefined;
      /* scoped */
      const __vue_scope_id__$f = undefined;
      /* module identifier */
      const __vue_module_identifier__$f = undefined;
      /* functional template */
      const __vue_is_functional_template__$f = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$f = normalizeComponent(
        { render: __vue_render__$f, staticRenderFns: __vue_staticRenderFns__$f },
        __vue_inject_styles__$f,
        __vue_script__$f,
        __vue_scope_id__$f,
        __vue_is_functional_template__$f,
        __vue_module_identifier__$f,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$g = {
      name: 'vf-datatable-dialog-settings',
      props: {
        value: {
          type: Object,
          default: () => ({})
        },
        showSettings: Boolean,
        field: Object
      },
      computed: {
        settingsFields: function () {
          return {
            'hide-columns': {
              type: 'input',
              input: 'objects-list',
              label: 'Hide columns',
              objects: this.field.columns,
              decorator: {
                id: 'column',
                title: 'title',
                label: ':title'
              }
            }
          };
        }
      },
      watch: {
        value: {
          deep: true,

          handler() {
            this.$emit('input', this.value);
          }

        }
      }
    };

    /* script */
    const __vue_script__$g = script$g;

    /* template */
    var __vue_render__$g = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-dialog",
        {
          attrs: { "max-width": "800px" },
          scopedSlots: _vm._u([
            {
              key: "activator",
              fn: function(ref) {
                var on = ref.on;
                return [
                  _c(
                    "v-btn",
                    _vm._g(
                      {
                        attrs: {
                          color: _vm.showSettings ? "warning" : "secondary",
                          icon: "",
                          "x-small": "",
                          text: ""
                        }
                      },
                      on
                    ),
                    [
                      _c("v-icon", { attrs: { small: "" } }, [
                        _vm._v(
                          _vm._s(
                            _vm.showSettings
                              ? "close"
                              : _vm.field.settings.icon
                              ? _vm.field.settings.icon
                              : "settings_applications"
                          )
                        )
                      ])
                    ],
                    1
                  )
                ]
              }
            }
          ]),
          model: {
            value: _vm.showSettings,
            callback: function($$v) {
              _vm.showSettings = $$v;
            },
            expression: "showSettings"
          }
        },
        [
          _c(
            "v-card",
            [
              _c("v-card-title", { staticClass: "headline" }, [
                _vm._v(_vm._s(_vm.field.settings.title))
              ]),
              _vm.showSettings
                ? _c("vf-fields-renderer", {
                    staticClass: "pa-2",
                    attrs: {
                      fields: _vm.settingsFields,
                      options: _vm.field.settings.options
                    },
                    model: {
                      value: _vm.value,
                      callback: function($$v) {
                        _vm.value = $$v;
                      },
                      expression: "value"
                    }
                  })
                : _vm._e()
            ],
            1
          )
        ],
        1
      )
    };
    var __vue_staticRenderFns__$g = [];
    __vue_render__$g._withStripped = true;

      /* style */
      const __vue_inject_styles__$g = undefined;
      /* scoped */
      const __vue_scope_id__$g = undefined;
      /* module identifier */
      const __vue_module_identifier__$g = undefined;
      /* functional template */
      const __vue_is_functional_template__$g = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$g = normalizeComponent(
        { render: __vue_render__$g, staticRenderFns: __vue_staticRenderFns__$g },
        __vue_inject_styles__$g,
        __vue_script__$g,
        __vue_scope_id__$g,
        __vue_is_functional_template__$g,
        __vue_module_identifier__$g,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$h = {
      name: 'vf-datatable-dialog-delete',
      props: {
        showDelete: Boolean,
        field: Object,
        selected: Array
      }
    };

    /* script */
    const __vue_script__$h = script$h;

    /* template */
    var __vue_render__$h = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-dialog",
        {
          attrs: { "max-width": "400px" },
          scopedSlots: _vm._u([
            {
              key: "activator",
              fn: function(ref) {
                var on = ref.on;
                return [
                  _c(
                    "v-btn",
                    _vm._g(
                      {
                        attrs: {
                          color: _vm.showDelete ? "warning" : "red",
                          icon: "",
                          "x-small": "",
                          text: ""
                        }
                      },
                      on
                    ),
                    [
                      _c("v-icon", { attrs: { small: "" } }, [
                        _vm._v(
                          _vm._s(
                            _vm.showDelete
                              ? "close"
                              : _vm.field.remove.icon
                              ? _vm.field.remove.icon
                              : "indeterminate_check_box"
                          )
                        )
                      ])
                    ],
                    1
                  )
                ]
              }
            }
          ]),
          model: {
            value: _vm.showDelete,
            callback: function($$v) {
              _vm.showDelete = $$v;
            },
            expression: "showDelete"
          }
        },
        [
          _c(
            "v-card",
            [
              _c("v-card-title", { staticClass: "headline" }, [
                _vm._v(
                  _vm._s(
                    _vm.field.remove.title ? _vm.field.remove.title : "You sure"
                  )
                )
              ]),
              _c(
                "v-card-actions",
                [
                  _c("v-spacer"),
                  _c(
                    "v-btn",
                    {
                      attrs: { text: "", color: "primary" },
                      on: {
                        click: function($event) {
                          _vm.$emit("cancel", $event);
                          _vm.showDelete = false;
                        }
                      }
                    },
                    [
                      _vm._v(
                        _vm._s(
                          _vm.field.remove.cancel
                            ? _vm.field.remove.cancel
                            : "Cancel"
                        )
                      )
                    ]
                  ),
                  _c(
                    "v-btn",
                    {
                      attrs: { text: "", color: "red" },
                      on: {
                        click: function($event) {
                          _vm.$emit("accept", $event);
                          _vm.showDelete = false;
                        }
                      }
                    },
                    [
                      _vm._v(
                        _vm._s(
                          _vm.field.remove.cancel ? _vm.field.remove.accept : "Yes"
                        )
                      )
                    ]
                  )
                ],
                1
              )
            ],
            1
          )
        ],
        1
      )
    };
    var __vue_staticRenderFns__$h = [];
    __vue_render__$h._withStripped = true;

      /* style */
      const __vue_inject_styles__$h = undefined;
      /* scoped */
      const __vue_scope_id__$h = undefined;
      /* module identifier */
      const __vue_module_identifier__$h = undefined;
      /* functional template */
      const __vue_is_functional_template__$h = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$h = normalizeComponent(
        { render: __vue_render__$h, staticRenderFns: __vue_staticRenderFns__$h },
        __vue_inject_styles__$h,
        __vue_script__$h,
        __vue_scope_id__$h,
        __vue_is_functional_template__$h,
        __vue_module_identifier__$h,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$i = {
      name: 'vf-datatable-dialog-create',
      props: {
        value: {
          type: Object,
          default: () => ({})
        },
        field: Object,
        forceShow: Boolean,
        editMode: Boolean
      },
      data: () => ({
        showCreate: false
      }),
      computed: {
        fieldCreateFields: function () {
          const self = this;
          const actions = !this.editMode ? {
            options: {
              props: {
                class: 'd-flex flex-row-reverse mt-3'
              }
            },
            fields: {
              addnclose: {
                type: 'input',
                input: 'button',
                label: this.field.create.labels && this.field.create.label.add_n_close ? this.field.create.label.add_n_close : 'Add and Close',
                class: 'col-3 me-1',
                action: 'add_n_close',
                props: {
                  outlined: true,
                  color: 'primary',
                  small: true,
                  click: () => {
                    self.$emit('on-create', self.value);
                    self.showCreate = false;
                  }
                }
              },
              addnnew: {
                type: 'input',
                input: 'button',
                label: this.field.create.labels && this.field.create.labels.add_n_new ? this.field.create.label.add_n_new : 'Add and New',
                class: 'col-3 me-1',
                action: 'add_n_new',
                props: {
                  outlined: true,
                  color: 'primary',
                  small: true,
                  click: () => {
                    self.$emit('on-create', self.value);
                    self.value = Object.assign({});
                  }
                }
              },
              cancel: {
                type: 'input',
                input: 'button',
                label: this.field.create.labels && this.field.create.labels.add_n_new ? this.field.create.label.add_n_new : 'Cancel',
                class: 'col-3 me-1',
                action: 'close',
                props: {
                  outlined: true,
                  color: 'warning',
                  small: true,
                  click: () => {
                    self.$emit('on-cancel');
                    self.showCreate = false;
                  }
                }
              }
            }
          } : {
            options: {
              props: {
                class: 'd-flex flex-row-reverse mt-3'
              }
            },
            fields: {
              update: {
                type: 'input',
                input: 'button',
                label: this.field.edit.label ? this.field.edit.label : 'Update',
                class: 'col-3 me-1',
                action: 'update',
                props: {
                  outlined: true,
                  color: 'primary',
                  small: true,
                  click: () => {
                    self.$emit('on-update', self.value);
                    self.value = Object.assign({});
                  }
                }
              },
              cancel: {
                type: 'input',
                input: 'button',
                label: this.field.cancel ? this.field.cancel : 'Cancel',
                class: 'col-3 me-1',
                action: 'close',
                props: {
                  outlined: true,
                  color: 'warning',
                  small: true,
                  click: () => {
                    self.$emit('on-cancel');
                    self.showCreate = false;
                  }
                }
              }
            }
          };
          return { ...this.field.create.fields,
            actions_row: actions
          };
        }
      },
      watch: {
        value: {
          deep: true,

          handler() {
            this.$emit('input', this.value);
          }

        },
        forceShow: function () {
          this.showCreate = this.forceShow;
        }
      },

      mounted() {
        this.showCreate = this.forceShow;
      }

    };

    /* script */
    const __vue_script__$i = script$i;

    /* template */
    var __vue_render__$i = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-dialog",
        {
          attrs: { persisted: "", "max-width": "800px" },
          on: {
            "click:outside": function($event) {
              return _vm.$emit("on-cancel")
            }
          },
          scopedSlots: _vm._u([
            {
              key: "activator",
              fn: function(ref) {
                var on = ref.on;
                return [
                  _c(
                    "v-btn",
                    _vm._g(
                      {
                        attrs: {
                          color: _vm.showCreate ? "warning" : "success",
                          icon: "",
                          "x-small": "",
                          text: ""
                        }
                      },
                      on
                    ),
                    [
                      _c("v-icon", { attrs: { small: "" } }, [
                        _vm._v(_vm._s(_vm.showCreate ? "close" : "add_box"))
                      ])
                    ],
                    1
                  )
                ]
              }
            }
          ]),
          model: {
            value: _vm.showCreate,
            callback: function($$v) {
              _vm.showCreate = $$v;
            },
            expression: "showCreate"
          }
        },
        [
          _c(
            "v-card",
            [
              _c("v-card-title", { staticClass: "headline" }, [
                _vm._v(_vm._s(_vm.field.create.title))
              ]),
              _c(
                "v-card-text",
                [
                  _c(
                    "v-container",
                    [
                      _c("vf-fields-renderer", {
                        ref: "renderer",
                        staticClass: "pa-2",
                        attrs: {
                          fields: _vm.fieldCreateFields,
                          options: _vm.field.create.options
                        },
                        model: {
                          value: _vm.value,
                          callback: function($$v) {
                            _vm.value = $$v;
                          },
                          expression: "value"
                        }
                      })
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          )
        ],
        1
      )
    };
    var __vue_staticRenderFns__$i = [];
    __vue_render__$i._withStripped = true;

      /* style */
      const __vue_inject_styles__$i = undefined;
      /* scoped */
      const __vue_scope_id__$i = undefined;
      /* module identifier */
      const __vue_module_identifier__$i = undefined;
      /* functional template */
      const __vue_is_functional_template__$i = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$i = normalizeComponent(
        { render: __vue_render__$i, staticRenderFns: __vue_staticRenderFns__$i },
        __vue_inject_styles__$i,
        __vue_script__$i,
        __vue_scope_id__$i,
        __vue_is_functional_template__$i,
        __vue_module_identifier__$i,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    var script$j = {
      components: {
        [__vue_component__$g.name]: __vue_component__$g,
        [__vue_component__$h.name]: __vue_component__$h,
        [__vue_component__$i.name]: __vue_component__$i
      },
      name: 'vf-datatable-input',
      props: {
        field: Object,
        id: String,
        value: Array
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        },
        headers: function () {
          const headers = [];

          if (this.field.columns) {
            this.field.columns.forEach(h => {
              if (h.type !== 'template' || !h.template.params || h.template.params.header !== false) {
                headers.push({
                  text: h.title,
                  value: h.column,
                  align: 'start',
                  sortable: h.sortable,
                  divider: true,
                  width: h.width
                });
              }
            });
          }

          return headers;
        },
        templates: function () {
          const templates = [];

          if (this.field.columns) {
            this.field.columns.forEach(h => {
              if (h.type === 'template') {
                const extras = {};
                const template = {
                  component: 'vf-table-column-' + h.template.component,
                  params: h.template.params,
                  column: h.column,
                  extras: extras
                };
                templates.push(template);

                if (h.template.params.slot === 'expanded-item') {
                  this.expandTemplate = template;
                  this.expandTemplateDefaultMetadata = { ...template.params.metadata
                  };
                }
              }
            });
          }

          return templates;
        },
        alert: function () {
          if (!this.response) {
            return {
              show: false
            };
          }

          return {
            show: this.response.status !== 200,
            color: this.response.status === 200 ? 'blue-grey darken-1 ' : 'error',
            type: this.response.status !== 200 ? 'error' : 'success',
            message: this.response.data.message,
            messages: this.response.data.errors
          };
        }
      },
      data: () => ({
        createModel: {},
        showAlert: false,
        showDelete: false,
        showCreate: false,
        loading: false,
        editMode: false,
        loadingId: 0,
        search: '',
        items: [],
        selected: [],
        expanded: [],
        options: {},
        total: 0,
        response: null,
        sortBy: null,
        sortDesc: null,
        expandTemplate: null,
        expandTemplateDefaultMetadata: null
      }),
      methods: {
        updateTable() {
          this.loading = true;
          this.loadingId += 1;
          const sort = [];
          this.options.sortBy.forEach((s, index) => {
            sort.push({
              column: s,
              direction: this.options.sortDesc[index] ? 'desc' : 'asc'
            });
          });

          if (this.field.table && this.field.table.query) {
            axios.post(this.field.table.query.url, {
              ref_id: this.loadingId,
              page: this.options.page,
              limit: this.options.itemsPerPage,
              search: this.search,
              sort: sort,
              with: this.field.table.query.params.with
            }).then(response => {
              this.response = response;

              if (response.data.data && this.loadingId <= response.data.ref_id) {
                this.updateTableData(response.data);
              }
            }).catch(error => {
              this.response = error.response;
            }).finally(() => {
              this.loading = false;
            });
          } else {
            this.loading = false;
            this.items = [];
          }
        },

        updateTableData(paginated) {
          this.items = paginated.data;
          this.total = paginated.total;
        },

        getTemplateSlot(template) {
          if (template.params && template.params.slot) {
            return template.params.slot;
          }

          return 'item.' + template.column;
        },

        getHeaderSlot(header) {
          return 'header.' + header.value;
        },

        onToggleItem(item) {
          this.toggleArray(this.expanded, item); // this.expandTemplate.params.metadata = this.expandTemplateDefaultMetadata;
        },

        onCloseItem(target) {
          this.putOffArray(this.expanded, target.item);
        },

        onExpandItem(target) {
          this.putOnArray(this.expanded, target.item);
          this.expandTemplate.params.metadata = target.link.metadata;
        },

        onRemoveSelected(item) {
          if (!item) {
            const self = this;
            this.items = this.items.filter(item => self.selected.filter(s => s.id === item.id).length === 0);
          } else {
            this.items = this.items.filter(i => i.id !== item.id);
          }

          this.selected = [];
        },

        onEditItem(item) {
          this.items.unshift({
            id: 'id#' + Math.random() * Number.MAX_SAFE_INTEGER,
            ...this.createModel
          });
        },

        onCreateNew() {
          this.items.unshift({
            id: 'id#' + Math.random() * Number.MAX_SAFE_INTEGER,
            ...this.createModel
          });
          this.showCreate = false;
        },

        onUpdateNew() {
          const self = this;
          this.items.forEach(item => {
            if (item.id === self.createModel.id) {
              for (const prop in self.createModel) {
                item[prop] = self.createModel[prop];
              }
            }
          });
          this.editMode = false;
          this.showCreate = false;
        },

        onCancelNew() {
          this.showCreate = false;
          this.editMode = false;
        },

        toggleArray(arr, item) {
          const index = arr.indexOf(item);

          if (index >= 0) {
            arr.splice(index, 1);
          } else {
            arr.push(item);
          }
        }

      },
      watch: {
        showCreate: function () {
          console.log('showcreate d', this.showCreate);
        },
        search: function (o, n) {
          this.updateTable();
        },
        options: {
          deep: true,

          handler() {
            this.updateTable();
          }

        },
        value: {
          deep: true,

          handler() {
            this.$emit('input', this.value);
          }

        },
        items: {
          deep: true,

          handler() {
            if (this.field.create) {
              this.value = [].concat(this.items);
              this.total = this.value.length;
            }
          }

        },
        selected: {
          deep: true,

          handler() {}

        }
      },

      mounted() {
        this.updateTable();
      }

    };

    /* script */
    const __vue_script__$j = script$j;

    /* template */
    var __vue_render__$j = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        { class: "vf-input d-flex flex-column flex-grow-1 " + _vm.field.class },
        [
          _c(
            "v-alert",
            {
              attrs: {
                type: _vm.alert.type,
                color: _vm.alert.color,
                dense: "",
                transition: "slide-y-transition",
                dismissible: ""
              },
              model: {
                value: _vm.alert.show,
                callback: function($$v) {
                  _vm.$set(_vm.alert, "show", $$v);
                },
                expression: "alert.show"
              }
            },
            [_vm._v(_vm._s(_vm.alert.message))]
          ),
          _c(
            "v-toolbar",
            { staticClass: "ma-0 pa-0", attrs: { dense: "", flat: "" } },
            [
              _c("label", [_vm._v(_vm._s(_vm.field.label))]),
              _c("v-spacer"),
              _vm.field.remove && _vm.selected.length > 0
                ? _c("vf-datatable-dialog-delete", {
                    attrs: {
                      showDelete: _vm.showDelete,
                      field: _vm.field,
                      selected: _vm.selected
                    },
                    on: {
                      accept: function($event) {
                        return _vm.onRemoveSelected()
                      }
                    }
                  })
                : _vm._e(),
              _vm.field.settings
                ? _c("vf-datatable-dialog-settings", {
                    attrs: { showSettings: _vm.showSettings, field: _vm.field },
                    model: {
                      value: _vm.settingsModel,
                      callback: function($$v) {
                        _vm.settingsModel = $$v;
                      },
                      expression: "settingsModel"
                    }
                  })
                : _vm._e(),
              _vm.field.create
                ? _c("vf-datatable-dialog-create", {
                    attrs: {
                      field: _vm.field,
                      forceShow: _vm.showCreate,
                      "edit-mode": _vm.editMode
                    },
                    on: {
                      "on-create": _vm.onCreateNew,
                      "on-cancel": _vm.onCancelNew,
                      "on-update": _vm.onUpdateNew
                    },
                    model: {
                      value: _vm.createModel,
                      callback: function($$v) {
                        _vm.createModel = $$v;
                      },
                      expression: "createModel"
                    }
                  })
                : _vm._e()
            ],
            1
          ),
          _c(
            "v-data-table",
            _vm._b(
              {
                attrs: {
                  headers: _vm.headers,
                  items: _vm.items,
                  search: _vm.search,
                  expanded: _vm.expanded,
                  "server-items-length": _vm.total,
                  options: _vm.options,
                  "sort-by": _vm.sortBy,
                  "sort-desc": _vm.sortDesc,
                  loading: _vm.loading,
                  "calculate-widths": true,
                  "selectable-key": ""
                },
                on: {
                  "update:expanded": function($event) {
                    _vm.expanded = $event;
                  },
                  "update:options": function($event) {
                    _vm.options = $event;
                  },
                  "update:sortBy": function($event) {
                    _vm.sortBy = $event;
                  },
                  "update:sort-by": function($event) {
                    _vm.sortBy = $event;
                  },
                  "update:sortDesc": function($event) {
                    _vm.sortDesc = $event;
                  },
                  "update:sort-desc": function($event) {
                    _vm.sortDesc = $event;
                  },
                  "click:row": _vm.onToggleItem
                },
                scopedSlots: _vm._u(
                  [
                    {
                      key: "item.data-table-select",
                      fn: function(ref) {
                        var item = ref.item;
                        var isSelected = ref.isSelected;
                        var select = ref.select;
                        return [
                          _c("v-simple-checkbox", {
                            staticClass: "d-inline",
                            attrs: { value: isSelected },
                            on: {
                              input: function($event) {
                                return select($event)
                              }
                            }
                          }),
                          _vm.field.remove
                            ? _c(
                                "v-btn",
                                {
                                  attrs: { icon: "", "x-small": "", color: "red" },
                                  on: {
                                    click: function($event) {
                                      return _vm.onRemoveSelected(item)
                                    }
                                  }
                                },
                                [
                                  _c("v-icon", { attrs: { "x-small": "" } }, [
                                    _vm._v(
                                      _vm._s(
                                        _vm.field.remove.icon
                                          ? _vm.field.remove.icon
                                          : "indeterminate_check_box"
                                      )
                                    )
                                  ])
                                ],
                                1
                              )
                            : _vm._e(),
                          _vm.field.edit
                            ? _c(
                                "v-btn",
                                {
                                  attrs: { icon: "", "x-small": "" },
                                  on: {
                                    click: function() {
                                      _vm.createModel = Object.assign({}, item);
                                      _vm.editMode = true;
                                      _vm.showCreate = true;
                                    }
                                  }
                                },
                                [
                                  _c("v-icon", { attrs: { "x-small": "" } }, [
                                    _vm._v(
                                      _vm._s(
                                        _vm.field.edit.icon
                                          ? _vm.field.edit.icon
                                          : "edit"
                                      )
                                    )
                                  ])
                                ],
                                1
                              )
                            : _vm._e()
                        ]
                      }
                    },
                    _vm._l(_vm.templates, function(template) {
                      return {
                        key: _vm.getTemplateSlot(template),
                        fn: function(ref) {
                          var item = ref.item;
                          return [
                            _c(template.component, {
                              key: template.column,
                              tag: "component",
                              attrs: {
                                item: item,
                                params: template.params,
                                column: template.column,
                                extras: template.extras
                              },
                              on: {
                                "open-extend": _vm.onExpandItem,
                                "close-extend": _vm.onCloseItem
                              }
                            })
                          ]
                        }
                      }
                    }),
                    _vm._l(_vm.headers, function(header) {
                      return {
                        key: _vm.getHeaderSlot(header),
                        fn: function(ref) {
                          return [_vm._v(_vm._s(header.text))]
                        }
                      }
                    })
                  ],
                  null,
                  true
                ),
                model: {
                  value: _vm.selected,
                  callback: function($$v) {
                    _vm.selected = $$v;
                  },
                  expression: "selected"
                }
              },
              "v-data-table",
              _vm.fieldProps,
              false
            )
          )
        ],
        1
      )
    };
    var __vue_staticRenderFns__$j = [];
    __vue_render__$j._withStripped = true;

      /* style */
      const __vue_inject_styles__$j = undefined;
      /* scoped */
      const __vue_scope_id__$j = undefined;
      /* module identifier */
      const __vue_module_identifier__$j = undefined;
      /* functional template */
      const __vue_is_functional_template__$j = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$j = normalizeComponent(
        { render: __vue_render__$j, staticRenderFns: __vue_staticRenderFns__$j },
        __vue_inject_styles__$j,
        __vue_script__$j,
        __vue_scope_id__$j,
        __vue_is_functional_template__$j,
        __vue_module_identifier__$j,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$k = {
      name: 'vf-button-input',
      props: {
        id: String,
        field: Object,
        value: Object
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        },
        fieldIconProps: function () {
          return { ...this.field.props,
            ...this.field.iconProps
          };
        }
      },
      methods: {}
    };

    /* script */
    const __vue_script__$k = script$k;

    /* template */
    var __vue_render__$k = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-btn",
        _vm._b(
          {
            class: "vf-input vf-btn " + _vm.field.class,
            on: { click: _vm.field.props.click }
          },
          "v-btn",
          _vm.fieldProps,
          false
        ),
        [
          _vm.field.label
            ? _c("span", [_vm._v(_vm._s(_vm.field.label))])
            : _vm._e(),
          _vm.field.icon
            ? _c("v-icon", _vm._b({}, "v-icon", _vm.fieldIconProps, false), [
                _vm._v(_vm._s(_vm.field.icon))
              ])
            : _vm._e()
        ],
        1
      )
    };
    var __vue_staticRenderFns__$k = [];
    __vue_render__$k._withStripped = true;

      /* style */
      const __vue_inject_styles__$k = undefined;
      /* scoped */
      const __vue_scope_id__$k = undefined;
      /* module identifier */
      const __vue_module_identifier__$k = undefined;
      /* functional template */
      const __vue_is_functional_template__$k = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$k = normalizeComponent(
        { render: __vue_render__$k, staticRenderFns: __vue_staticRenderFns__$k },
        __vue_inject_styles__$k,
        __vue_script__$k,
        __vue_scope_id__$k,
        __vue_is_functional_template__$k,
        __vue_module_identifier__$k,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$l = {
      name: 'vf-column',
      props: {
        value: {
          type: Object,
          default: () => ({})
        },
        id: String,
        field: Object
      }
    };

    /* script */
    const __vue_script__$l = script$l;

    /* template */
    var __vue_render__$l = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-col",
        _vm._b(
          { class: "vf-column " + _vm.field.class },
          "v-col",
          _vm.field.props,
          false
        ),
        [
          _c("vf-fields-renderer", {
            attrs: {
              fields: _vm.field.fields,
              options: _vm.field.options,
              id: _vm.id + "-row-fields"
            },
            model: {
              value: _vm.value,
              callback: function($$v) {
                _vm.value = $$v;
              },
              expression: "value"
            }
          })
        ],
        1
      )
    };
    var __vue_staticRenderFns__$l = [];
    __vue_render__$l._withStripped = true;

      /* style */
      const __vue_inject_styles__$l = undefined;
      /* scoped */
      const __vue_scope_id__$l = undefined;
      /* module identifier */
      const __vue_module_identifier__$l = undefined;
      /* functional template */
      const __vue_is_functional_template__$l = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$l = normalizeComponent(
        { render: __vue_render__$l, staticRenderFns: __vue_staticRenderFns__$l },
        __vue_inject_styles__$l,
        __vue_script__$l,
        __vue_scope_id__$l,
        __vue_is_functional_template__$l,
        __vue_module_identifier__$l,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$m = {
      name: 'vf-group-single-exp',
      props: {
        field: Object,
        id: String,
        value: {
          type: Object,
          default: () => ({})
        }
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      watch: {
        value: {
          deep: true,
          handler: function () {
            this.$emit('input', this.value);
          }
        }
      }
    };

    /* script */
    const __vue_script__$m = script$m;

    /* template */
    var __vue_render__$m = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-expansion-panels",
        _vm._b(
          { class: "v-group " + _vm.field.class },
          "v-expansion-panels",
          _vm.fieldProps,
          false
        ),
        [
          _c(
            "v-expansion-panel",
            [
              _c("v-expansion-panel-header", [_vm._v(_vm._s(_vm.field.label))]),
              _c(
                "v-expansion-panel-content",
                [
                  _c("vf-fields-renderer", {
                    attrs: {
                      options: _vm.field.options,
                      fields: _vm.field.fields,
                      id: _vm.id + "-fields"
                    },
                    model: {
                      value: _vm.value,
                      callback: function($$v) {
                        _vm.value = $$v;
                      },
                      expression: "value"
                    }
                  })
                ],
                1
              )
            ],
            1
          )
        ],
        1
      )
    };
    var __vue_staticRenderFns__$m = [];
    __vue_render__$m._withStripped = true;

      /* style */
      const __vue_inject_styles__$m = undefined;
      /* scoped */
      const __vue_scope_id__$m = undefined;
      /* module identifier */
      const __vue_module_identifier__$m = undefined;
      /* functional template */
      const __vue_is_functional_template__$m = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$m = normalizeComponent(
        { render: __vue_render__$m, staticRenderFns: __vue_staticRenderFns__$m },
        __vue_inject_styles__$m,
        __vue_script__$m,
        __vue_scope_id__$m,
        __vue_is_functional_template__$m,
        __vue_module_identifier__$m,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$n = {
      name: 'vf-group-expansions',
      props: {
        field: Object,
        id: String,
        value: {
          type: Object,
          default: () => ({})
        }
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      watch: {
        value: {
          deep: true,
          handler: function () {
            console.log('expan', this.value);
            this.$emit('input', this.value);
          }
        }
      }
    };

    /* script */
    const __vue_script__$n = script$n;

    /* template */
    var __vue_render__$n = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-expansion-panels",
        _vm._b(
          { class: "v-group " + _vm.field.class },
          "v-expansion-panels",
          _vm.fieldProps,
          false
        ),
        _vm._l(_vm.field.groups, function(item, key) {
          return _c(
            "v-expansion-panel",
            { key: _vm.id + "-group-expansion-" + key },
            [
              _c("v-expansion-panel-header", [_vm._v(_vm._s(item.label))]),
              _c(
                "v-expansion-panel-content",
                [
                  _c("vf-fields-renderer", {
                    attrs: {
                      options: item.options,
                      fields: item.fields,
                      id: _vm.id + "-expansion-fields"
                    },
                    model: {
                      value: _vm.value[key],
                      callback: function($$v) {
                        _vm.$set(_vm.value, key, $$v);
                      },
                      expression: "value[key]"
                    }
                  })
                ],
                1
              )
            ],
            1
          )
        }),
        1
      )
    };
    var __vue_staticRenderFns__$n = [];
    __vue_render__$n._withStripped = true;

      /* style */
      const __vue_inject_styles__$n = undefined;
      /* scoped */
      const __vue_scope_id__$n = undefined;
      /* module identifier */
      const __vue_module_identifier__$n = undefined;
      /* functional template */
      const __vue_is_functional_template__$n = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$n = normalizeComponent(
        { render: __vue_render__$n, staticRenderFns: __vue_staticRenderFns__$n },
        __vue_inject_styles__$n,
        __vue_script__$n,
        __vue_scope_id__$n,
        __vue_is_functional_template__$n,
        __vue_module_identifier__$n,
        false,
        undefined,
        undefined,
        undefined
      );

    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    var script$o = {
      name: 'vf-group-tabs',
      props: {
        field: Object,
        id: String,
        value: {
          type: Object,
          default: () => ({})
        }
      },
      computed: {
        fieldProps: function () {
          return { ...this.field.props
          };
        }
      },
      watch: {
        value: {
          deep: true,
          handler: function () {
            this.$emit('input', this.value);
          }
        }
      }
    };

    /* script */
    const __vue_script__$o = script$o;

    /* template */
    var __vue_render__$o = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "v-tabs",
        _vm._b(
          { class: "v-group " + _vm.field.class },
          "v-tabs",
          _vm.fieldProps,
          false
        ),
        [
          _vm._l(_vm.field.groups, function(item, key) {
            return _c(
              "v-tab",
              {
                key: _vm.id + "-tab-label-" + key,
                attrs: { href: "#" + _vm.id + "-tab-" + key }
              },
              [_c("label", [_vm._v(_vm._s(item.label))])]
            )
          }),
          _vm._l(_vm.field.groups, function(item, key) {
            return _c(
              "v-tab-item",
              {
                key: _vm.id + "-tab-item-" + key,
                attrs: { value: _vm.id + "-tab-" + key }
              },
              [
                _c("vf-fields-renderer", {
                  attrs: {
                    options: item.options,
                    fields: item.fields,
                    id: _vm.id + "-tab-fields"
                  },
                  model: {
                    value: _vm.value[key],
                    callback: function($$v) {
                      _vm.$set(_vm.value, key, $$v);
                    },
                    expression: "value[key]"
                  }
                })
              ],
              1
            )
          })
        ],
        2
      )
    };
    var __vue_staticRenderFns__$o = [];
    __vue_render__$o._withStripped = true;

      /* style */
      const __vue_inject_styles__$o = undefined;
      /* scoped */
      const __vue_scope_id__$o = undefined;
      /* module identifier */
      const __vue_module_identifier__$o = undefined;
      /* functional template */
      const __vue_is_functional_template__$o = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      

      
      const __vue_component__$o = normalizeComponent(
        { render: __vue_render__$o, staticRenderFns: __vue_staticRenderFns__$o },
        __vue_inject_styles__$o,
        __vue_script__$o,
        __vue_scope_id__$o,
        __vue_is_functional_template__$o,
        __vue_module_identifier__$o,
        false,
        undefined,
        undefined,
        undefined
      );

    const customComponents = {
      [__vue_component__.name]: __vue_component__,
      [__vue_component__$a.name]: __vue_component__$a,
      [__vue_component__$d.name]: __vue_component__$d,
      [__vue_component__$e.name]: __vue_component__$e,
      [__vue_component__$9.name]: __vue_component__$9,
      [__vue_component__$1.name]: __vue_component__$1,
      [__vue_component__$8.name]: __vue_component__$8,
      [__vue_component__$7.name]: __vue_component__$7,
      [__vue_component__$2.name]: __vue_component__$2,
      [__vue_component__$6.name]: __vue_component__$6,
      [__vue_component__$3.name]: __vue_component__$3,
      [__vue_component__$4.name]: __vue_component__$4,
      [__vue_component__$5.name]: __vue_component__$5,
      [__vue_component__$b.name]: __vue_component__$b,
      [__vue_component__$c.name]: __vue_component__$c,
      [__vue_component__$f.name]: __vue_component__$f,
      [__vue_component__$j.name]: __vue_component__$j,
      [__vue_component__$k.name]: __vue_component__$k,
      [__vue_component__$n.name]: __vue_component__$n,
      [__vue_component__$m.name]: __vue_component__$m,
      [__vue_component__$o.name]: __vue_component__$o,
      [__vue_component__$l.name]: __vue_component__$l
    };
    var Components = {
      install(Vue, options) {
        const register = function (Vue, components) {
          for (const comp in components) {
            if (Object.prototype.hasOwnProperty.call(components, comp)) {
              Vue.component(comp, components[comp]);
            }
          }
        };

        register(Vue, customComponents);
      },

      VFTextInput: __vue_component__$1,
      VuetifyFormJSON: __vue_component__,
      VFColorInput: __vue_component__$2,
      VFButtonGroupInput: __vue_component__$3,
      VFSelectInput: __vue_component__$4,
      VFRangeInput: __vue_component__$5,
      VFSwitchInput: __vue_component__$6,
      VFJSONInput: __vue_component__$a,
      VFCheckboxInput: __vue_component__$b,
      VFObjectsListInput: __vue_component__$c,
      VFRadioGroupInput: __vue_component__$d,
      VFBitwiseFlagsInput: __vue_component__$e,
      VFImageUploadInput: __vue_component__$f,
      VFDatatableInput: __vue_component__$j,
      VFButtonInput: __vue_component__$k,
      VFGroupSingleExpansion: __vue_component__$m,
      VFGroupExpansion: __vue_component__$n,
      VFGroupTabs: __vue_component__$o,
      VFColumn: __vue_component__$l
    };

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var vueAxios_min = createCommonjsModule(function (module, exports) {
    var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o};!function(){function o(e,t){if(!o.installed){if(o.installed=!0,!t)return void console.error("You have to install axios");e.axios=t,Object.defineProperties(e.prototype,{axios:{get:function(){return t}},$http:{get:function(){return t}}});}}"object"==(_typeof(exports))?module.exports=o:window.Vue&&window.axios&&Vue.use(o,window.axios);}();
    });

    function install(Vue, options) {
      if (install.installed) return;
      install.installed = true;
      Components.install(Vue);

      if (!options || !options.withoutAxios) {
        Vue.use(vueAxios_min, axios);
      }
    } // Create module definition for Vue.use()

    const plugin = {
      install
    }; // Auto-install when vue is found (eg. in browser via <script> tag)

    let GlobalVue = null;

    if (typeof window !== 'undefined') {
      GlobalVue = window.Vue;
    } else if (typeof global !== 'undefined') {
      GlobalVue = global.Vue;
    }

    if (GlobalVue) {
      GlobalVue.use(plugin);
    }

    exports.install = install;

    return exports;

}({}, JSONEditor, VuetifyImageInput, axios));
